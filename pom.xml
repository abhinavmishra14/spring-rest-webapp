<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.abhinavmishra14</groupId>
	<artifactId>spring-rest-webapp</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>This is a sample REST based Spring webapp</name>
	<url>https://github.com/abhinavmishra14/spring-rest-webapp</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java-version>1.7</java-version>
		<springframework.version>4.3.0.RELEASE</springframework.version>
		<jackson.library>2.7.5</jackson.library>
		<org.slf4j-version>1.7.25</org.slf4j-version>
		<bottom>Copyright Â© 2017. Abhinav Kumar Mishra. All rights reserved.</bottom>
	</properties>

	<licenses>
		<license>
			<name>The Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Abhinav Kumar Mishra</name>
			<email>abhinavmishra14@gmail.com</email>
			<organizationUrl>http://javaworld-abhinav.blogspot.com</organizationUrl>
		</developer>
	</developers>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${springframework.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.library}</version>
		</dependency>

		<!-- This dependency will produce response as xml by default. To return 
			default json comment this dependency -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>${jackson.library}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.library}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.library}</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Servlet -->
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-servlet-api</artifactId>
			<version>7.0.30</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp.jstl</groupId>
			<artifactId>jstl-api</artifactId>
			<version>1.2</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>spring-rest-webapp</finalName>
		<plugins>

			<!-- Project is JDK 1.7 compliant, so source and target version should 
				be 1.7 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Checkstyle integration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.17</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>package</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<failOnViolation>true</failOnViolation>
							<configLocation>${basedir}/checkstyle.xml</configLocation>
							<includes>com/**/*.java</includes>
							<excludes>com/github/abhinavmishra14/**/*Test.java</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- PMD Integration, you can also run it directly using mvn pmd:pmd -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jxr</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.6</version>
				<configuration>
					<!-- Run PMD on the tests. Default: false -->
					<includeTests>false</includeTests>

					<!-- Skip the PMD checks. Most useful on the command line via "-Dpmd.skip=true" -->
					<skip>false</skip>

					<!-- Print details of check failures to build output. -->
					<verbose>true</verbose>
					<!-- Link the violation line numbers to the source xref. Links will 
						be created automatically if the jxr plugin is being used. Default: true -->
					<linkXRef>true</linkXRef>

					<!-- Set the output format type, in addition to the HTML report. Must 
						be one of: "none", "csv", "xml", "txt" or the full class name of the PMD 
						renderer to use. See the net.sourceforge.pmd.renderers package javadoc for 
						available renderers. XML is required if the pmd:check goal is being used. 
						Default: xml -->
					<format>xml</format>

					<!-- Fail build if there are high priority warnings during pmd:check. 
						Default value is 5 -->
					<failurePriority>1</failurePriority>

					<!-- A list of files to include from checking. Can contain Ant-style 
						wildcards and double wildcards. Defaults to **\/*.java. -->
					<includes>
						<include>com/**/*.java</include>
					</includes>

					<!-- A list of files to exclude from checking. Can contain Ant-style 
						wildcards and double wildcards. We are not excluding anything here. -->
					<!-- <excludes> <exclude></exclude> </excludes> -->

					<!-- The output directory for the final HTML report. -->
					<outputDirectory>${project.reporting.outputDirectory}</outputDirectory>

					<!-- The output directory for the intermediate XML report. -->
					<targetDirectory>${project.build.directory}</targetDirectory>

					<rulesets>
						<!-- Multiple rule set xmls can be included here. -->
						<ruleset>${basedir}/pmd_ruleset.xml</ruleset>
					</rulesets>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<!-- Creates a PMD report. -->
							<goal>pmd</goal>

							<!-- Fail the build if there were any PMD violations in the source 
								code. Uncomment if needed -->
							<goal>check</goal>

							<!-- Creates a report for PMD's copy paste detector tool -->
							<goal>cpd</goal>

							<!-- Fail the build if there were any CPD violations in the source 
								code. Uncomment if needed -->
							<!-- <goal>cpd-check</goal> -->
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- FindBugs Integration, you can also run it directly using mvn findbugs:findbugs -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.3</version>
				<configuration>
					<!-- FindBugs will show what is doing during analysis. -->
					<debug>false</debug>
					<!-- Enables analysis which takes more memory but finds more bugs. If 
						you run out of memory, changes the value of the effort element to 'min'. 
						Min|Default|Max are possible values. -->
					<effort>Min</effort>
					<!-- Reports all bugs (other values are High|Normal|Low|Exp|Ignore) -->
					<threshold>High</threshold>
					<xmlOutput>true</xmlOutput>
					<!-- Optional directory to save findbugs xdoc xml report -->
					<xmlOutputDirectory>${project.reporting.outputDirectory}</xmlOutputDirectory>

					<!-- Indicates to analyze only given java packages, We are allowing 
						everything here. -->
					<!-- <onlyAnalyze>com.*</onlyAnalyze> -->

					<failOnError>true</failOnError>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<!-- This goal will check code and generate report -->
							<!-- <goal>findbugs</goal> -->

							<!-- Fail the build if there were any findBugs violations in the source 
								code. Uncomment if needed -->
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- JavaDocs plug-in -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Java sources plug-in -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
